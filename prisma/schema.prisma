generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id            String   @id @default(uuid())
  name          String
  birth_date    DateTime
  cpf           String
  address       String
  neighborhood  String
  number        Int
  complement    String
  cep           String
  city          String
  uf            String
  phone         String
  email         String   @unique
  password_hash String

  Professional Professional[]
  User         User[]

  @@map("person")
}

model Professional {
  person    Person @relation(fields: [person_id], references: [id])
  person_id String @id

  crp        String
  voluntary  Boolean
  Schedule   Schedule[]
  Scheduling Scheduling[]

  @@map("professionals")
}

model User {
  person    Person @relation(fields: [person_id], references: [id])
  person_id String @id

  gender     String
  Goal       Goal[]
  Daily      Daily[]
  Scheduling Scheduling[]

  @@map("user")
}

model Goal {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userPersonId], references: [person_id])
  userPersonId String   @map("user_person_id")
  description  String
  numberDays   Int      @map("number_days")
  isExecuted   Boolean  @default(false) @map("is_executed")
  isExpire     Boolean  @default(false) @map("is_expire")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("goal")
}

model Daily {
  id           String   @id @default(uuid())
  content      String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userPersonId], references: [person_id])
  userPersonId String   @map("user_person_id")

  @@map("daily")
}

model Schedule {
  id                   String       @id @default(uuid())
  professional         Professional @relation(fields: [professionalPersonId], references: [person_id])
  professionalPersonId String       @map("professional_person_id")
  initialTime          DateTime?    @map("initial_time")
  endTime              DateTime?    @map("end_time")
  interval             Int
  cancellationPolicy   Int          @map("cancellation_policy")
  averageValue         Decimal      @map("average_value")
  observation          String?
  isControlled         Boolean

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Hourly    Hourly[]

  @@map("schedule")
}

model Scheduling {
  id                   String       @id @default(uuid())
  hourly               Hourly       @relation(fields: [hourlyId], references: [id])
  hourlyId             String       @map("hourly_id")
  professional         Professional @relation(fields: [professionalPersonId], references: [person_id])
  professionalPersonId String       @map("professional_person_id")
  user                 User         @relation(fields: [userPersonId], references: [person_id])
  userPersonId         String       @map("user_person_id")

  @@map("scheduling")
}

model Hourly {
  id         String       @id @default(uuid())
  schedule   Schedule     @relation(fields: [scheduleId], references: [id])
  scheduleId String       @map("schedule_id")
  date       DateTime
  hour       String
  isOcuped   Boolean      @default(false) @map("is_ocuped")
  Scheduling Scheduling[]

  @@map("hourly")
}
