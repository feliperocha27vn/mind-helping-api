{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "[História 1] Infraestrutura: Configuração do Projeto e Segurança Inicial",
        "description": "Configurar a infraestrutura base do projeto, incluindo containerização, configuração do banco de dados e medidas iniciais de segurança para conformidade com a LGPD.",
        "details": "Esta história é a fundação de todo o projeto. Inclui configurar Docker para um ambiente de desenvolvimento padronizado, preparar o PostgreSQL para produção e SQLite para o mobile, e implementar a criptografia de senhas.",
        "testStrategy": "Verificar se os containers Docker compilam e executam. Confirmar conexões com os bancos de dados. Escrever teste unitário para o utilitário de hash de senhas.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Infra: Configurar ambiente de desenvolvimento com Docker",
            "description": "Criar um arquivo docker-compose.yml para padronizar os serviços da API, banco de dados, etc.",
            "status": "done"
          },
          {
            "id": 2,
            "title": "Infra: Estruturar bancos de dados (PostgreSQL e SQLite)",
            "description": "Definir esquemas iniciais e configurar as conexões para produção e mobile.",
            "status": "done"
          },
          {
            "id": 3,
            "title": "Segurança: Implementar utilitário de criptografia de senhas",
            "description": "Criar um módulo reutilizável com bcrypt ou Argon2 para hashear e verificar senhas.",
            "status": "done"
          },
          {
            "id": 4,
            "title": "Segurança: Implementar conformidade inicial com a LGPD",
            "description": "Garantir que dados sensíveis como CPF sejam tratados corretamente desde o início.",
            "status": "done"
          }
        ]
      },
      {
        "id": 2,
        "title": "[História 2] API: Endpoint de Registro de Usuário (Paciente)",
        "description": "Criar o endpoint da API para que novos pacientes se cadastrem na plataforma.",
        "details": "Implementar a rota POST /auth/register/user com todas as validações necessárias, como campos obrigatórios, força da senha, validação de CPF e integrações externas (Correios, Google).",
        "testStrategy": "Testes unitários para cada regra de validação. Teste de integração para o endpoint, mockando APIs externas. ",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Criar rota e controlador para POST /auth/register/user",
            "description": "Estruturar o endpoint base para receber os dados de cadastro.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Implementar validação de campos obrigatórios e senha forte",
            "description": "Adicionar as lógicas de validação para os dados de entrada.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "API: Implementar validação de formato e unicidade do CPF",
            "description": "Garantir que o CPF é válido e não existe no sistema.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "API: Integrar com API dos Correios para busca de endereço via CEP",
            "description": "Criar serviço para consultar CEP em API externa.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "API: Implementar fluxo de cadastro com Google (OAuth 2.0)",
            "description": "Permitir que usuários se cadastrem com suas contas Google.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 3,
        "title": "[História 3] API: Endpoint de Registro de Profissional",
        "description": "Criar o endpoint da API para que novos profissionais se cadastrem na plataforma.",
        "details": "Implementar a rota POST /auth/register/professional com validações específicas, como a verificação de atividade do CRP.",
        "testStrategy": "Testes unitários para a lógica de validação do CRP. Testes de integração para o endpoint completo.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Criar rota e controlador para POST /auth/register/professional",
            "description": "Estruturar o endpoint base para o cadastro.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Implementar validação dos campos obrigatórios do profissional",
            "description": "Adicionar lógica para validar todos os dados de entrada.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "API: Investigar e implementar validação de CRP ativo",
            "description": "Criar serviço para consultar o status do CRP em um órgão externo.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "API: Adicionar campo booleano 'isSocial' ao modelo e endpoint",
            "description": "Permitir que o profissional se marque como social.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 4,
        "title": "[História 4] API: Login Unificado e Geração de JWT",
        "description": "Implementar um endpoint único de login para pacientes e profissionais que retorna um token de autenticação.",
        "details": "Criar a rota POST /auth/login que verifica credenciais em ambas as tabelas de usuário e, em caso de sucesso, gera e retorna um JSON Web Token (JWT) com os dados pertinentes.",
        "testStrategy": "Testes de integração para login bem-sucedido e falho de ambos os perfis. Testar o payload e a validade do JWT gerado.",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Criar rota e controlador para POST /auth/login",
            "description": "Estruturar o endpoint unificado.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Implementar lógica de verificação de credenciais para múltiplos perfis",
            "description": "Buscar usuário pelo e-mail e verificar a senha com bcrypt.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "API: Implementar serviço de geração de JWT",
            "description": "Criar e retornar um JWT assinado com ID e perfil do usuário.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 5,
        "title": "[História 5] Mobile: Tela de Registro de Usuário",
        "description": "Desenvolver a interface de usuário para registro de pacientes no app móvel e conectar ao backend.",
        "details": "Construir a UI da tela de registro conforme 'Figura 9' e integrá-la com o endpoint POST /auth/register/user, tratando todas as respostas da API.",
        "testStrategy": "Teste de UI para garantir fidelidade ao protótipo. Teste de integração automatizado para verificar a correta chamada à API e o tratamento de respostas.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Mobile: Desenvolver a UI da tela de cadastro (Figura 9)",
            "description": "Implementar todos os componentes visuais do formulário de registro.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Mobile: Implementar validação de formulário client-side",
            "description": "Adicionar validações locais para feedback rápido ao usuário.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Mobile: Integrar formulário com a API POST /auth/register/user",
            "description": "Realizar a chamada de rede ao submeter o formulário.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Mobile: Gerenciar estados de carregamento, sucesso e erro",
            "description": "Exibir feedback visual apropriado para o usuário durante e após a chamada.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 6,
        "title": "[História 6] Web: Tela de Registro de Profissional",
        "description": "Desenvolver a interface de usuário para registro de profissionais na plataforma web e conectar ao backend.",
        "details": "Construir a UI da tela de registro de profissional conforme 'Figura 23' e integrá-la ao endpoint POST /auth/register/professional.",
        "testStrategy": "Teste de UI. Teste E2E do fluxo de registro na web.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Web: Desenvolver a UI da tela de cadastro de profissional (Figura 23)",
            "description": "Implementar os componentes visuais do formulário.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Web: Integrar formulário com a API POST /auth/register/professional",
            "description": "Realizar a chamada de rede ao submeter o formulário.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Web: Gerenciar estados de carregamento e feedback ao usuário",
            "description": "Exibir mensagens de sucesso ou erro.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 7,
        "title": "[História 7] Mobile: Login e Gerenciamento de Sessão",
        "description": "Desenvolver a tela de login móvel e implementar o gerenciamento local de sessão.",
        "details": "Construir a UI de login conforme 'Figura 10', integrar com a API POST /auth/login e armazenar o JWT recebido de forma segura no dispositivo.",
        "testStrategy": "Teste de UI. Teste manual de login com credenciais válidas e inválidas. Verificar se o JWT é armazenado com segurança (Keychain/Keystore).",
        "priority": "high",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Mobile: Desenvolver a UI da tela de login (Figura 10)",
            "description": "Implementar os campos de e-mail, senha e botão de login.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Mobile: Integrar com a API POST /auth/login",
            "description": "Realizar a chamada de autenticação.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Mobile: Implementar armazenamento seguro do JWT",
            "description": "Usar Keychain para iOS e Keystore para Android para salvar o token.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Mobile: Implementar interceptor de requisições para anexar o JWT",
            "description": "Adicionar o token automaticamente a todas as chamadas autenticadas.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 8,
        "title": "[História 8] Web: Login e Gerenciamento de Sessão",
        "description": "Desenvolver a tela de login web e implementar o gerenciamento de sessão.",
        "details": "Construir a UI de login conforme 'Figura 21', integrar com a API POST /auth/login e gerenciar a sessão do usuário (preferencialmente com cookies).",
        "testStrategy": "Teste de UI. Verificar persistência da sessão e funcionalidade de logout.",
        "priority": "high",
        "dependencies": [
          4,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Web: Desenvolver a UI da tela de login (Figura 21)",
            "description": "Implementar o formulário de login.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Web: Integrar com a API POST /auth/login",
            "description": "Realizar a chamada de autenticação.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Web: Implementar gerenciamento de sessão com Cookies",
            "description": "Salvar o token em um cookie HttpOnly e Secure.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Web: Implementar funcionalidade de Logout",
            "description": "Criar lógica para limpar o cookie de sessão.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 9,
        "title": "[História 9] API: Endpoints de Gerenciamento de Perfil",
        "description": "Criar endpoints da API para usuários visualizarem, atualizarem e excluírem seus próprios perfis.",
        "details": "Implementar GET /me, PUT /me e DELETE /me. Garantir que os endpoints sejam protegidos e operem apenas nos dados do usuário autenticado.",
        "testStrategy": "Testes de integração para cada endpoint (GET, PUT, DELETE) usando um JWT válido.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Implementar middleware de autenticação",
            "description": "Criar um middleware que valida o JWT e anexa o usuário à requisição.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Criar endpoint GET /me",
            "description": "Retornar os dados do usuário autenticado.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "API: Criar endpoint PUT /me",
            "description": "Permitir a atualização dos dados do perfil do usuário.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "API: Criar endpoint DELETE /me",
            "description": "Permitir a exclusão da conta do usuário.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 10,
        "title": "[História 10] Mobile: Funcionalidade Editar Perfil",
        "description": "Desenvolver a tela 'Editar Perfil' no app móvel para pacientes.",
        "details": "Construir a UI conforme 'Figura 20' e integrar com GET /me para popular, PUT /me para salvar e DELETE /me para excluir (com confirmação).",
        "testStrategy": "Teste de UI. Teste manual do fluxo completo de edição e exclusão.",
        "priority": "medium",
        "dependencies": [
          7,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Mobile: Desenvolver a UI da tela 'Editar Perfil' (Figura 20)",
            "description": "Implementar a interface visual.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Mobile: Integrar com GET /me para popular o formulário",
            "description": "Buscar e exibir os dados atuais do usuário.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Mobile: Integrar com PUT /me para salvar alterações",
            "description": "Enviar os dados atualizados para a API.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Mobile: Integrar com DELETE /me, incluindo diálogo de confirmação",
            "description": "Implementar o fluxo de exclusão de conta.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 11,
        "title": "[História 11] Web: Funcionalidade Editar Perfil Profissional",
        "description": "Desenvolver a tela 'Editar Perfil' na plataforma web para profissionais.",
        "details": "Construir a UI conforme 'Figura 27' e integrar com os endpoints /me (GET, PUT, DELETE).",
        "testStrategy": "Teste de UI. Teste E2E do fluxo de edição e exclusão na web.",
        "priority": "medium",
        "dependencies": [
          8,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Web: Desenvolver a UI da tela 'Editar Perfil' (Figura 27)",
            "description": "Implementar a interface visual.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Web: Integrar com os endpoints GET /me, PUT /me e DELETE /me",
            "description": "Implementar o fluxo completo de gerenciamento de perfil.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 12,
        "title": "[História 12] API: Endpoints de Sentimento e Diário",
        "description": "Criar endpoints backend para registrar sentimentos dos usuários e gerenciar entradas do diário.",
        "details": "Implementar POST /sentiments/records e CRUD para /diary, com a regra de negócio que impede edição de entradas concluídas.",
        "testStrategy": "Testes unitários para a regra de negócio. Testes de integração para todos os endpoints.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Criar endpoint POST /sentiments/records",
            "description": "Permitir o registro de uma entrada de sentimento.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Criar endpoints CRUD para Diário (POST, GET, DELETE)",
            "description": "Implementar o gerenciamento completo das entradas do diário.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "API: Implementar regra de negócio para impedir edição de diário",
            "description": "Bloquear atualizações em entradas já concluídas.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 13,
        "title": "[História 13] Mobile: Funcionalidade Sentimento e Diário",
        "description": "Desenvolver a UI móvel para registrar sentimentos e gerenciar o diário pessoal.",
        "details": "Construir a UI de registro de sentimento ('Figura 12') e as telas de diário ('Figura 13'), e integrá-las com os respectivos endpoints.",
        "testStrategy": "Teste de UI. Teste E2E do fluxo completo de registro de sentimento e criação/visualização de entrada no diário.",
        "priority": "high",
        "dependencies": [
          7,
          12
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Mobile: Desenvolver UI de registro de sentimento na tela inicial (Figura 12)",
            "description": "Implementar a interface visual.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Mobile: Desenvolver telas de listagem e criação de diário (Figura 13)",
            "description": "Implementar as interfaces do diário.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Mobile: Integrar as telas com os endpoints da API",
            "description": "Conectar as interfaces ao backend.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 14,
        "title": "[História 14] API: Endpoints de Metas Pessoais",
        "description": "Criar endpoints backend para gerenciar metas pessoais e acompanhar progresso.",
        "details": "Implementar CRUD para /goals e o endpoint POST /goals/:id/progress, com a regra de negócio que impede edição após o primeiro progresso.",
        "testStrategy": "Teste unitário para a regra de negócio. Testes de integração para todos os endpoints.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Criar endpoints CRUD para Metas (POST, GET, DELETE)",
            "description": "Implementar o gerenciamento completo de metas.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Criar endpoint POST /goals/:id/progress",
            "description": "Permitir o registro de progresso em uma meta.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "API: Implementar regra de negócio para impedir edição de meta",
            "description": "Bloquear atualizações em metas com progresso.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 15,
        "title": "[História 15] Mobile: Funcionalidade Metas Pessoais",
        "description": "Desenvolver a UI móvel para criar, gerenciar e acompanhar metas pessoais.",
        "details": "Construir a UI conforme 'Figura 14' e integrar com os endpoints da API /goals.",
        "testStrategy": "Teste de UI. Teste E2E do ciclo completo de uma meta: criação, progresso e exclusão.",
        "priority": "medium",
        "dependencies": [
          7,
          14
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Mobile: Desenvolver telas de criação e gerenciamento de metas (Figura 14)",
            "description": "Implementar as interfaces visuais.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Mobile: Integrar telas de metas com os endpoints da API",
            "description": "Conectar as interfaces ao backend.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 16,
        "title": "[História 16] API: Endpoints de Relatórios de Usuário",
        "description": "Criar endpoints backend para gerar relatórios sobre humor e variação de sentimento do usuário.",
        "details": "Implementar GET /reports/user/sentiment-variation e GET /reports/user/mood-history, que devem agregar dados de sentimentos e diário.",
        "testStrategy": "Testes de integração para verificar a estrutura dos dados retornados e a correção da lógica de agregação com diferentes conjuntos de dados.",
        "priority": "medium",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Criar endpoint GET /reports/user/sentiment-variation",
            "description": "Implementar a lógica de agregação para o relatório diário.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Criar endpoint GET /reports/user/mood-history",
            "description": "Implementar a lógica de agregação para o relatório mensal.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 17,
        "title": "[História 17] Mobile: Telas de Relatórios de Usuário",
        "description": "Desenvolver a UI móvel para exibir relatórios de sentimento e humor do usuário.",
        "details": "Construir as UIs para 'Relatório de Variação de Sentimentos' ('Figura 16') e 'Relatório Mensal' ('Figura 17'), integrando com as APIs de relatórios.",
        "testStrategy": "Teste de UI para garantir que os gráficos e dados sejam exibidos corretamente. Teste manual populando dados e verificando a geração dos relatórios.",
        "priority": "medium",
        "dependencies": [
          13,
          16
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Mobile: Desenvolver tela de Relatório de Variação de Sentimentos (Figura 16)",
            "description": "Implementar a interface, incluindo a biblioteca de gráficos.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Mobile: Desenvolver tela de Relatório Mensal de Sentimentos (Figura 17)",
            "description": "Implementar a segunda tela de relatório.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Mobile: Integrar as telas com as APIs de relatórios",
            "description": "Conectar os componentes de UI aos endpoints de dados.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 18,
        "title": "[História 18] API e Web: Gerenciamento de Agenda Profissional",
        "description": "Implementar a funcionalidade para profissionais criarem e gerenciarem suas agendas de trabalho.",
        "details": "Criar endpoint POST /schedules com lógica para geração de horários e a UI web 'Gerenciar Agenda' ('Figura 22') para interagir com ele.",
        "testStrategy": "Testes unitários para a lógica de geração de agenda. Teste E2E do profissional criando uma nova agenda na web.",
        "priority": "high",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Criar endpoint POST /schedules para cadastro de agenda",
            "description": "Permitir que o profissional defina seus horários.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Implementar lógica de geração de horários (manual e automática)",
            "description": "Criar os slots de tempo com base nos parâmetros fornecidos.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "API: Implementar regra para desabilitar valor da consulta para sociais",
            "description": "Garantir que profissionais sociais não possam definir um valor de consulta.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Web: Desenvolver a tela de 'Gerenciar Agenda' (Figura 22)",
            "description": "Implementar a interface visual.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Web: Integrar a interface com o endpoint de criação de agenda",
            "description": "Conectar a UI ao backend.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 19,
        "title": "[História 19] API e Web: Visualizações de Pacientes/Agendamentos do Profissional",
        "description": "Implementar a funcionalidade para profissionais visualizarem seus pacientes e próximos agendamentos.",
        "details": "Criar endpoints GET /professionals/me/patients e GET /professionals/me/appointments e as UIs web 'Visualizar Pacientes' ('Figura 26') e 'Visualizar Agendamentos' ('Figura 25').",
        "testStrategy": "Testes de integração para ambos os endpoints. Teste E2E criando agendamentos e verificando se eles aparecem corretamente para o profissional.",
        "priority": "high",
        "dependencies": [
          8,
          20
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Criar endpoint GET /professionals/me/patients",
            "description": "Listar os pacientes de um profissional.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Criar endpoint GET /professionals/me/appointments",
            "description": "Listar os agendamentos de um profissional.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Web: Desenvolver a tela 'Visualizar Pacientes' (Figura 26)",
            "description": "Implementar a interface visual.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Web: Desenvolver a tela 'Visualizar Agendamentos' (Figura 25)",
            "description": "Implementar a interface visual.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Web: Integrar as telas com os respectivos endpoints da API",
            "description": "Conectar as UIs ao backend.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 20,
        "title": "[História 20] API e Mobile: Busca e Agendamento de Profissional",
        "description": "Implementar o fluxo completo para o paciente buscar um profissional e agendar uma consulta.",
        "details": "API: Criar GET /professionals (com filtros), GET /professionals/:id/availability e POST /appointments. Mobile: Desenvolver as telas 'Buscar Profissionais' ('Figura 11') e 'Realizar Agendamento' ('Figura 19').",
        "testStrategy": "Testes de integração para os três endpoints, com atenção especial à condição de corrida no agendamento. Teste E2E completo do fluxo no mobile.",
        "priority": "high",
        "dependencies": [
          7,
          18
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "API: Criar endpoint GET /professionals com filtros",
            "description": "Permitir a busca de profissionais com base em nome, social, etc.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "API: Criar endpoint GET /professionals/:id/availability",
            "description": "Retornar os horários disponíveis de um profissional.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "API: Criar endpoint POST /appointments com tratamento de concorrência",
            "description": "Permitir o agendamento de consulta de forma atômica (usando transações).",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Mobile: Desenvolver a tela 'Buscar Profissionais' (Figura 11)",
            "description": "Implementar a interface de busca e filtragem.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Mobile: Desenvolver a tela 'Realizar Agendamento' (Figura 19)",
            "description": "Implementar o calendário e a seleção de horários.",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "Mobile: Integrar todo o fluxo de busca e agendamento",
            "description": "Conectar as UIs aos endpoints da API.",
            "status": "pending"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-04T16:51:00.000Z",
      "updated": "2025-09-04T20:01:21.623Z",
      "description": "Plano de tarefas completo e granular (20 histórias) gerado pelo Taskmaster com base no documento 'Plano de Tarefas do Projeto: Mind Helping'."
    }
  }
}